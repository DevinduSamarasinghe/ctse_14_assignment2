name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ctse_14_assignment2 # set this to your Amazon ECR repository name
  ECS_SERVICE: ctse-backend-service-1 # set this to your Amazon ECS service name
  ECS_CLUSTER: ctse-cluster # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ctse-backend.json # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: ctse_14_assignment2 # set this to the name of the container in the containerDefinitions section of your task definition
  ASG_GROUP: Infra-ECS-Cluster-ctse-cluster-0b87923c-ECSAutoScalingGroup-3K7KbrScQIKh #Set this to the ASG Group associated with your ECS cluster


jobs:
  deploy:
    name: Pushing Docker Image to Amazon ECR and Deploying to Amazon ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    
      - name: Collect Current Desired Count and Update 
        run: |
          current_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name ${{env.ASG_GROUP}} --region ${{ env.AWS_REGION}} | jq -r '.AutoScalingGroups[0].DesiredCapacity')
          echo "Current Instance Count: $current_count"
          new_count=$((current_count+1))
          echo "New Desired Count: $new_count" 
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${{env.ASG_GROUP}} --desired-capacity $new_count --region ${{env.AWS_REGION}}
          echo "Updated Desired Count to $new_count"
          sleep 70s

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
            task-definition: ${{ env.ECS_TASK_DEFINITION }}
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ steps.build-image.outputs.image }}
    
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE }}
            cluster: ${{ env.ECS_CLUSTER }}
            wait-for-service-stability: true