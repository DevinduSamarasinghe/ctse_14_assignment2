
name: Deploy to Amazon ECS

on:
  push:
    branches:
      - feat/blue-green-deployment

env:
  AWS_REGION: ap-south-1                      # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ctse_14_assignment2          # set this to your Amazon ECR repository name
  ECS_SERVICE: ctse-backend-service              # set this to your Amazon ECS service name
  ECS_CLUSTER: ctse-cluster               # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ctse-backend.json # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: ctse_14_assignment2         # set this to the name of the container in the containerDefinitions section of your task definition
  CODEDEPLOY_APPLICATION_NAME: AppECS-ctse-cluster-ctse-backend-service 
  CODEDEPLOY_DEPLOYMENT_GROUP: DgpECS-ctse-cluster-ctse-backend-service
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update the Task Definition in ECS
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Create appspec.yaml
        run: |
            echo "version: 0.0" >> appspec.yaml
            echo "Resources:" >> appspec.yaml
            echo "  - TargetService:" >> appspec.yaml
            echo "      Type: AWS::ECS::Service" >> appspec.yaml
            echo "      Properties:" >> appspec.yaml
            echo "        TaskDefinition: ${{ steps.task-def.outputs.task-definition }}" >> appspec.yaml
            echo "        LoadBalancerInfo:" >> appspec.yaml
            echo "          ContainerName: ${{ env.CONTAINER_NAME }}" >> appspec.yaml
            echo "          ContainerPort: 80" >> appspec.yaml

            - name: Create appspec.yaml
            run: |
              echo "version: 0.0" > appspec.yaml
              echo "Resources:" >> appspec.yaml
              echo "  - TargetService:" >> appspec.yaml
              echo "      Type: AWS::ECS::Service" >> appspec.yaml
              echo "      Properties:" >> appspec.yaml
              echo "        TaskDefinition: ${{ steps.task-def.outputs.task-definition }}" >> appspec.yaml
              echo "        LoadBalancerInfo:" >> appspec.yaml
              echo "          ContainerName: ${{ env.CONTAINER_NAME }}" >> appspec.yaml
              echo "          ContainerPort: 80" >> appspec.yaml
    
      - name: Deploy to Amazon ECS with Blue-Green using AWS CLI
        run: |
            aws deploy create-deployment \
              --application-name $CODEDEPLOY_APPLICATION \
              --deployment-group-name $CODEDEPLOY_DEPLOYMENT_GROUP \
              --s3-location bucket=codepipeline-ap-south-1-949929072300,key=appspec.yaml,bundleType=YAML \
              --region $AWS_REGION
